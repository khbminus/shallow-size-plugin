

package org.jub.kotlin.compiler.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jub.kotlin.compiler.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
    @Test
    public void testAllFilesPresentInBox2() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/aBitSilly")
    @TestDataPath("$PROJECT_ROOT")
    public class ABitSilly {
        @Test
        public void testAllFilesPresentInABitSilly() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/aBitSilly"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("Silly.kt")
        public void testSilly() throws Exception {
            runTest("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/aBitSilly/Silly.kt");
        }
    }

    @Nested
    @TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/differentClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class DifferentClasses {
        @Test
        public void testAllFilesPresentInDifferentClasses() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/differentClasses"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("Main.kt")
        public void testMain() throws Exception {
            runTest("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/differentClasses/Main.kt");
        }
    }

    @Nested
    @TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/neeeeested")
    @TestDataPath("$PROJECT_ROOT")
    public class Neeeeested {
        @Test
        public void testAllFilesPresentInNeeeeested() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/neeeeested"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("neeeested.kt")
        public void testNeeeested() throws Exception {
            runTest("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/neeeeested/neeeested.kt");
        }
    }

    @Nested
    @TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/simple")
    @TestDataPath("$PROJECT_ROOT")
    public class Simple {
        @Test
        public void testAllFilesPresentInSimple() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/simple"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/simple/simple.kt");
        }
    }

    @Nested
    @TestMetadata("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/super_silly")
    @TestDataPath("$PROJECT_ROOT")
    public class Super_silly {
        @Test
        public void testAllFilesPresentInSuper_silly() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/super_silly"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("SuperSilly.kt")
        public void testSuperSilly() throws Exception {
            runTest("shallowsize-plugin/src/test/resources/org/jub/kotlin/compiler/code-gen/ir/box2/super_silly/SuperSilly.kt");
        }
    }
}
